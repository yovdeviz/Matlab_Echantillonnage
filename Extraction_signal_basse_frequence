
clc;
%% On veut extraire un signal sinus de frequence basse qui est dans un signal compos� de plusieurs sinus
%% La premiere approche est d utiliser un filtre passe bas fr�quences aussi appel� lissage pour supprimer les autres signaux
%% Pour cette illustration, on va extraire le signal x2 de fr�quence 3750 Hz
%% Pour rappel, il faut raisonner en termes de bande passante
%% Ne pas oublier notre ami Shanon
N=1024;                             %Taille du signal


%% A0 / Generation d'un bruit gaussien de puissance p
p = 0.2;
moy = 0;
bruit= moy + p*randn(1,N);



%%  A / Generation d'un signal bruite sb(t)

Fe= 20000;                          %Frequence d'echantillonage dans l'ordre de 10^4
k=0:N-1;                            %Tableau de points
t=k/Fe;                             %Graduation de L axe des temps, on s arrete a chaque fois a une frequence des points Fe
f1=2130;
f2=3750;    % a extraire
f3=4960;
a1=1;
a2=1.8;     % a extraire
a3=0.9;
x1=a1*sin(2*pi*f1*t);               % generation de x1
x2=a2*sin(2*pi*f2*t);               % generation de x2
x3=a3*sin(2*pi*f3*t);
sb=x1+x2+x3+bruit;
Tfsb=abs(fft(sb));

%% Extraction du signal x2(t)
%% Synthese du filtre passe bas : RIF (Reponse Impulsionnelle Finie)
%% Bande Passante 1 [3000 Hz 4000 Hz]
%% Bande Passante 2 [4000 Hz 16000 Hz]
%% Application + Observation de la reponse impulsionnelle 


te=1/Fe;     %Periode d'echantillonnage
f2=3750;     %Frequence du signal qu'on veut extraire : x2(t)
fn1=3700;    %frequence born�e min de la bande 1
fn2=3800;    %frequence born�e max de la bande 1
fn3=16200;   %frequence born�e min de la bande 2
fn4=16300;   %frequence born�e max de la bande 2
n=N*f2/Fe;
n1=round(N*fn1/Fe);
n2=round(N*fn2/Fe);
n3=round(N*fn3/Fe);
n4=round(N*fn4/Fe);
F=k*Fe/N;
p=[zeros(1,n1) ones(1,n2-n1) zeros(1,n3-n2) ones(1,n4-n3) zeros(1,n1)];   % on appelle cela dans le jargon des cell arrays
TFx2=p.*(TFsb);

%% Extraction du signal x2(t)
%% On fait l'inverse de la TF de x2 pour r�cup�rer x2 :) facile hein ?

 Extracted_x2=(ifft(TFx2));
 
 
 %% Pour finir , on effectue une comparaison entre le signal qu'on a et le signal x2 intial 
 %% Sorte de v�rification quoi , facile hein ?
 comp=x2-Extracted_x2;
 
 


%% Affichage de courbes c'est partii !!!
 
figure(1)
subplot(2,2,1)
plot(t,p,'');                       % trac� de p en fonction de t
title(' Signal p(t) dans le domaine temporel')
xlabel('temps [s]')
ylabel('Amplitudes P[N]')
grid


subplot(2,2,2)
plot(F,p,'');                       % trac� de p en fonction de f
title(' Signal p(t) dans le domaine frequentiel')
xlabel(' Frequences [Hz]')
ylabel('Amplitudes P[f]')
grid


subplot(2,2,3)
plot(F,TFx2,'r');                       % trac� de TFX2 en fonction de f
title(' Transformee de fourier du signal x2')
xlabel('Frequences [Hz]')
ylabel('Amplitudes P[f]')
grid


subplot(2,2,4)
plot(F,TFsb,'g');                       % trac� de TFsbruit� en fonction de f
title(' Transformee de fourier du signal bruite')
xlabel('Frequences [Hz]')
ylabel('Amplitudes P[f]')
grid


figure(2)
subplot(3,1,1)
plot(t,real(x2),'b',t,imag(x2),'b');                       % trac� de l'extraction de x2 en fonction de t
title(' signal x2 initial')
xlabel('temps [s]')
ylabel('Amplitudes X2(t)')
grid

subplot(3,1,2)
plot(t,real(Extracted_x2),'r',t,imag(Extracted_x2),'b');                       % trac� de l'extraction de x2 en fonction de t
title(' Extraction du signal x2')
xlabel('temps [s]')
ylabel('Amplitudes X2_extrait(t)')
grid

subplot(3,1,3)
plot(t,real(comp),'k',t,imag(comp),'b');                       % verification de notre extraction
title(' Verification de notre extraction')
xlabel('temps [s]')
ylabel('Amplitudes x2 - x2_extrait')
grid

